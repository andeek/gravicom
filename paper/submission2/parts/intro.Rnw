Many different relationships are often easily conceptualized as a graph or network, where a graph is defined as a collection of nodes (entities or vertices) and edges (relationships or links) \citep{newman2003structure}. Examples of such relationships include social networks (sociology), the world wide web (computer science), and protein networks (biology). Community detection in particular is often one important goal in the analysis of real world networks, with the aim of identifying members or entities in the network that share a similar characteristic of interest. Communities, also known as clusters or modules, are roughly defined as a group of nodes in a graph that share properties \citep{fortunato2010community}. Commonly, a community structure can be characterized in a graph as a collection of nodes which share many edges internally, but exhibit relatively fewer edges to other nodes outside the collection. 

Community detection has largely been studied in the computer science and physics literature \citep{gn-football, hofman2008bayesian, lancichinetti2008benchmark, leskovec2008statistical, karrer2011stochastic}, with increasing interest in statistical investigations as well \citep{amini2013pseudo, bickel2013asymptotic}. There are earlier notions in the statistics literature about defining and modeling structure in network data through graph topological features regarding node connectedness \citep{wasserman1994social, holland1981exponential}. However, this earlier literature does not directly consider current problem formulation of partitioning nodes into communities, but certainly the underlying aspects of community structure are important to these earlier modeling works for networks. 

Current methodology for community detection often involves an algorithmic approach for node clustering and commonly partitions a graph into node clusters in an iterative manner before some stopping criterion are met. These algorithmic approaches typically involve first defining an objective function that defines a community in terms of internal connectivity versus external and then optimizing this objective function. One prevalent example of an objective function is the modularity measure by \citet{newman2004finding}. Modularity is defined as $$Q = \sum\limits_{r}(e_{rr} - a_r^2)$$ where $e_{rr}$ is the fraction of links that connect two nodes inside the community $r$, and $a_r$ is the fraction of links that have one or both vertices inside the community $r$. The search for an optimal modularity value is an NP-hard problem because the number of possible partitions of the network requires $2^n$ complexity (where $n$ is the number of nodes in a network). In fact, the optimization of an objective function is typically an NP-hard problem, which is why heuristic or approximate approaches to find nodes that optimize the objective function are necessary \citep{leskovec2010empirical, duch2005community}. Heuristic-based clustering is indeed useful because this offers an automated way to perform community detection. However, determining the best algorithm for community detection is intractable because, as noted by  \citet{fortunato2010community}, ``The main elements of the problem themselves [graph clustering], i.e. the concepts of community and partition, are not rigorously defined, and require some degree of arbitrariness and/or common sense". Parametric statistical approaches to community detection have also received increasingly greater attention with many of these methods relying heavily on stochastic block models \citep{nowicki2001estimation, PhysRevE.84.036103, karrer2011stochastic}, often combined with some form of Bayesian analysis \citep{kemp2006learning, airoldi2009mixed, guo2013bayesian}. However, these statistical analyses are difficult to automate, and presuppose some knowledge about the graph data structure for formulating models and prior distributions. Similar to algorithmic approaches, implementation of these statistical methods can become complicated when the nature of communities is unclear. 

Since communities are often fuzzily-defined human concepts, an alternative approach is to leverage the human visual system, which is capable of incorporating nuance, to identify communities. However, in the mathematical mechanics of current algorithmic and statistical approaches to community detection, user visual inspection of graph data does not inherently guide how community structures are obtained. Tools exist for displaying or visualizing graph data but there is a disconnect between the capability to display such data and the ability of a user to visually guide steps of community detection. For example, tools such as igraph \citep{gc-igraph}, Gephi \citep{ICWSM09154}, and Graphviz \citep{Graphviz} for graph visualization offer only algorithmic approaches for community detection, separate from any input or interface on the part of a user, and NodeXL \citep{hansen2010analyzing} offers similar algorithms for a related concept called cliques. Recently, there have been advances in the production of open source packages to simplify creation and visualization of graphs for the web. Tools such as JSNetworkX \citep{JSNetworkx} and the R \citep{r-stats} package d3Network \citep{d3Network} are both built upon the D3 \citep{mb-d3} framework and aim to help users create graph visualizations from their own data. However, these tools currently do not have built-in functionality to deal with community detection as a process of statistical analysis through data visualization.

Our goal in this paper is to introduce a novel visualization-based community detection tool, called gravicom, which allows users to visually direct and interact with the steps of community detection. Additionally, as described in the following, gravicom is equipped with several functionalities that permit users to visually cluster nodes and assess the resulting clusters through visual features and statistical quantitative summaries in the process of finding community structures. Unlike the tools mentioned above for graph visualization, gravicom allows human interaction as the vehicle for community detection. We incorporate three key graphical devices to formulate gravicom. The first is visualization of a graph using a node-link diagram; the second is using a force-directed graph layout in our visualization; and the third is the ability to simplify a graph by grouping subsets of nodes into a representation based on the user's definition of a community. gravicom can be used as a standalone exploratory tool for graph data or to generate an initial state to be passed to a community detection algorithm or model-based statistical procedure in order to reduce the complexity of optimization or implementation.

To illustrate the usefulness of the human visual system in community detection in comparison to the algorithmic approach, we present a small example. Let $G$ be a graph with 11 nodes composed of two perfect cliques and six edges connecting the cliques. Using the algorithmic approaches available in igraph, we can partition the graph in multiple ways depending on the algorithm used. However, in partitioning $G$ in gravicom, the human eye can easily detect the two communities and partition the graph accordingly. Figure~\ref{fig:small_example} shows three algorithmic approaches, a modularity approach \citep{clauset2004finding}, an approach based on information flow in the network \citep{rosvall2008maps}, and an approach based on edge betweeness \citep{newman2004finding}, compared to the result from gravicom. The three algorithmic approached produce three distinct partitionings of the graph. In this small example it is possible to see the value of the human eye in that it can get things ``easily" right in a place where an algorithm is off. 

<<intro-example, echo=FALSE, warning=FALSE, message=FALSE, fig.width='\\textwidth', fig.cap="\\label{fig:small_example}Three algorithmic approaches for detecting communities in a small example, a modularity approach \\citep{clauset2004finding}, an approach based on information flow in the network \\citep{rosvall2008maps}, and an approach based on edge betweeness \\citep{newman2004finding}, compared to the result from gravicom. Tt is possible to see the value of the human eye in that it can get things ``easily\" right in a place where an algorithm is off.">>=
library(igraph)
G <- graph_from_literal(A:B:C:D:E:F-A:B:C:D:E:F, A1:B1:C1:D1:E1:F1-A1:B1:C1:D1:E1:F1,A-A1,B-B1,C-C1,D-D1,E-E1,F-F1,
                         A-F1,B-C1,C-D1,D-E1,E-F1,F-A1)
comm_fast <- cluster_fast_greedy(G)
comm_edge <- cluster_edge_betweenness(G)
comm_info <- cluster_infomap(G)

G_grouped <- as.undirected(read_graph("../data/small_test_grouped.gml", format = "gml"))
V(G_grouped)$Group[V(G_grouped)$Group == "1"] <- 1
V(G_grouped)$Group[V(G_grouped)$Group == "0"] <- 2


opar <- par()
par(family = "serif", mfrow = c(2,2))
plot(G, vertex.color = membership(comm_fast), main = "Fast Greedy Modularity Algorithm")
plot(G, vertex.color = membership(comm_info), main = "Infomap Algorithm")
plot(G, vertex.color = membership(comm_edge), main = "Edge Betweenness Algorithm")
plot(G_grouped, vertex.color = V(G_grouped)$Group, main = "gravicom")
par(mfrow = c(1,1))
@


To visualize a graph, a node-link diagram is used in which a node is represented as a single point and a connecting edge is represented as a line connecting two points. Creation of this diagram involves assigning each node a Cartesian coordinate, which is not an inherent property of a graph. This assignment is called a graph layout. \citet{mcgrath1996seeing} found that the layout of a graph significantly affected the number of communities that users detected within a graph. Thus, when humans are the mechanism used to detect communities, special attention needs to be paid to the layout being used. The same study also found that location of a node spatially relative to other nodes in a cluster has a significant effect on user ability to detect the community. The authors suggest a simple principle that will lead to clear depiction of a network: ``adjacent nodes must be placed near to each other if possible" \citep{mcgrath1996seeing}. One layout that adheres to this principle is a force-directed layout. This layout algorithm implements edges as fixed-distance geometric constraints, meaning that groups of nodes sharing multiple edges are pulled in closer proximity. \citet{dwyer2009comparison} found the force-directed layout to be the best algorithmic layout as a platform to detect cliques, which are one type of community. Further, they concluded that user-generated layouts similar to a force-based layout, but with symmetric layout within the cliques, allowed an even more accurate cluster recognition by users. Adaptation of the force-directed layout to incorporate a symmetric within-cluster layout ``may be a difficult task for automatic algorithms, since maximal clique detection is NP-hard" \citep{dwyer2009comparison}. As cliques are similar to communities, in fact a clique is a community with perfect membership, we infer that adaptation of the force-directed layout to have symmetry within a community would be equivalently difficult. Thus, a force-directed layout is a starting point for the user to be able to ``tweak" a layout into a more easily interpretable structure. We incorporated this crucial aspect into the mechanics of gravicom.

In complex or large graphs it can be difficult to glean meaning from a graphical representation, even while using a force-directed layout. \citet{dunne2013motif} introduce the idea of motifs, or repeated patterns in a graph, to simplify a network. One type of motif is a clique. By replacing the cliques with representations, like a large circle, and removing the corresponding extra nodes and edges, the visualization will be more effective at revealing relationships. With fewer nodes and edges to display, visual complexity of the graph visualization is greatly reduced, allowing the user to analyze the network structure more accurately.

Having introduced the three key visual devices informing gravicom, we next describe the user interface and functionality in Section 2. In Section 3, we then illustrate the use of gravicom for community detection with two network data sets, one, a well known data set of college football and the other, a network of political book co-purchasing. Section 4 then provides concluding remarks as well as a look forward at further network inference problems that can be addressed with extensions and modifications of gravicom. gravicom is available at \url{https://andeek.shinyapps.io/gravicom/}. A technical appendix details three important pieces of technology that we used to create gravicom and describes the technical aspects of how these components are implemented together.


